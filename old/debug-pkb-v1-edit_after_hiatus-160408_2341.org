;; ************************************************
;; pkb

;;; PKB-CONCAT=
(let ((txt "abc"))
  (insert "(" txt " ")
  (pkb-concat= 'txt "123")
  (insert txt ")")
)
(abc abc123)

;;; PKB-DOLIST-CONS
(let ((tst-lst '(1 2 3)))
  (pkb-dolist-cons (elem-cons tst-lst)
		   (setcar elem-cons (1+ (car elem-cons))))
  (in-pr tst-lst))
(2 3 4)

;;; PKB-ADD-TO-END-OF-LIST
(let (tst-lst last-cons)
  (insert "(initial: ")
  (in-pr tst-lst)
  (insert "\n")
  (pkb-add-to-end-of-list 'tst-lst 'a 'last-cons)
  (insert "add 'a: ")
  (in-pr tst-lst)
  (insert "\n")
  (pkb-add-to-end-of-list 'tst-lst '(g 56) 'last-cons)
  (insert "add '(g 56): ")
  (in-pr tst-lst)
  (insert ")")
  )
(initial: nil
add 'a: (a)
add '(g 56): (a (g 56)))

;;; PKB-INCLUDE-BASE-KEY-LIST
(in-pr pkb-include-base-key-list)
(return tab escape backspace delete insert home end prior next right down left up f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 lwindow rwindow apps kp-down kp-add kp-begin kp-decimal kp-delete kp-divide kp-down kp-end kp-enter kp-equal kp-home kp-insert kp-left kp-multiply kp-next kp-prior kp-right kp-separator kp-space kp-subtract kp-tab kp-up kp-1 kp-2 kp-3 kp-4 kp-5 kp-6 kp-7 kp-8 kp-9 mouse-5 mouse-4 mouse-1 mouse-2 mouse-3 mouse-4)

;;; PKB-INCLUDE-KEYBOARD-MODIFIER
(in-pr pkb-include-keyboard-modifier)
(shift control meta alt)

;;; PKB-INCLUDE-MOUSE-MODIFIER
(in-pr pkb-include-mouse-modifier)
(click down double drag triple)

;;; PKB-CHAR-TABLE-EVENTP
(let ((tst-lst '(?\C-a ?\e ?a prior right) ))
  (insert "(")
  (dolist (elem tst-lst)
    (insert (key-description (vector elem)) ": "
	    (prin1-to-string (pkb-char-table-eventp elem)) "\n"))
  (insert ")")
)
(C-a: t
ESC: t
a: t
<prior>: nil
<right>: nil
)

;;; PKB-ESC-MAPP
(let ((tst-lst '([?a ?b] [?b ?\C-r ?\e]) )) 
  (insert "(")
 (dolist (elem tst-lst)
    (insert (prin1-to-string elem) ": "
	    (prin1-to-string (pkb-esc-mapp elem)) "\n"))
  (insert ")")
)
([97 98]: nil
[98 18 27]: t
)

;;; PKB-INCLUDE-MK-P
(let ((tst-lst '(?\C-a ?\e ?a prior right [?4 ?6] [f19 ?t] [?\C-x cut]) ))
  (insert "(")
  (dolist (elem tst-lst)
    (insert
     (key-description (if (vectorp elem) elem (vector elem))) ": "
     (prin1-to-string (pkb-include-mk-p elem)) "\n"))
  (insert ")")
)
(C-a: t
ESC: t
a: t
<prior>: t
<right>: t
4 6: t
<f19> t: nil
C-x <cut>: nil
)

;;; PKB-COMPARE-KEY-SEQUENCES, PKB-COMPARE-MODIFIED-KEYS,
;;;  PKB-COMPARE-BASE-KEY
(let ((tst-lst '( [?a ?b ?c] [?a ?b] [?a ?\C-b] [?a left] [?a ?a])) sorted-lst)
  (insert "( initial: (")
  (dolist (elem tst-lst)
    (unless (eq elem (car tst-lst)) (insert " "))
    (insert "[" (key-description elem) "]"))
  (insert ")")
  (insert "\nAfter sort: (")
  (setq sorted-lst (sort tst-lst 'pkb-compare-key-sequences))
  (dolist (elem sorted-lst)
    (unless (eq elem (car sorted-lst)) (insert " "))
    (insert "[" (key-description elem) "]"))
  (insert ") )")
)
( initial: ([a b c] [a b] [a C-b] [a <left>] [a a])
After sort: ([a a] [a b] [a b c] [a <left>] [a C-b]) )

;;; PKB-ACCESSIBLE-KEYMAPS
(in-pr
 (pkb-accessible-keymaps
  '(keymap (?a keymap (?b . binding) (?c . binding2))
	   (?c keymap (?d . binding3) (?g keymap (?q . binding4)))
	   (?h keymap (?p . binding5) (?\C-w keymap (?a . binding5))))
  ))

(in-pr
 (pkb-accessible-keymaps 
  '(keymap (1 keymap (1 . binding) (2 . binding2))
	   (2 keymap (1 . binding3) (2 keymap (1 . binding4)))
	   (3 keymap
	      (1 . binding5)
	      (2 keymap
		  (1 . binding5)
		  (2 keymap (1 . bind)))
	      (3 keymap
		  (1 . binding5)
		  (2 keymap (ccba . bind)))))
  '([2] [3]) '([2 2] ([3 2]))
  ))

(in-pr
 (pkb-accessible-keymaps 
  (current-global-map)
  '(([?\M-g])))
)

(in-pr
 (pkb-accessible-keymaps 
  (current-global-map))
)


;;; PKB-INTERNAL-FIX-M-ESC-IN-KEY-SEQUENCES
(let ((tst-lst '([?a ?b] [?b ?\C-r ?\e] [?b ?\e ?\e ?h ?\e ?\e]
		 [?b ?\M-\e ?h ?\M-\e]) )) 
  (insert "(")
 (dolist (elem tst-lst)
    (insert (prin1-to-string elem) ": "
	    (prin1-to-string (pkb-internal-fix-m-esc-in-key-sequences elem))
	    "\n"))
  (insert ")")
)
([97 98]: [97 98]
[98 18 27]: [98 18 27]
[98 27 27 104 27 27]: [98 27 27 104 27 27]
[98 134217755 104 134217755]: [98 27 27 104 27 27]
)

;;; PKB-LIST-KEYS

(in-pr (pkb-list-keys (current-global-map) nil t))

;;; PKB-INT-FIND-DEFN-CONS

(let ((key-list (pkb-list-keys (current-global-map))))
  (in-pr (pkb-int-find-defn-cons key-list ?\C-5))
)

;;; PKB-CATEGORIZE-KEY-LIST

(let ((translate-events-list '((f5 (next 12) t) (57 (C-prior)))))
  (in-pr (pkb-categorize-key-list (pkb-list-keys (current-local-map)) 7 11
				  translate-events-list)))

(let ((translate-events-list '((f5 (weird 444) t) (?\C-m (C-H-prior)))))
  (in-pr (pkb-categorize-key-list (pkb-list-keys (current-global-map) nil t) 7 11 translate-events-list)))

(in-pr-map 'map-char-table
	   (cddr (pkb-categorize-key-list
		   (pkb-list-keys (current-global-map) nil t) 7 11)))

(let ((km (make-keymap)))
  (define-key km [?\M-\e] 'bind01)
  (define-key km [?a] 'bind02)
  (define-key km [?\C-a] 'bind03)
  (define-key km [?\C-q] 'bind04)
  (define-key km [?f] 'bind05)
  (define-key km [?g] 'bind06)
  (define-key km [?\M--] 'bind07)
  (define-key km [?\M-+] 'bind08)
  (define-key km [?e] 'bind12)
  (define-key km [(?1 . ?9)] 'bind09)
  (define-key km [?\[] 'bind10)
  (define-key km [prior] 'bind11)
  (define-key km [C-prior] 'bind13)
  (let ((list-keys (pkb-list-keys km nil t)))
    (in-pr (pkb-categorize-key-list list-keys 6 13)))
)

(let ((km (make-keymap)))
  (define-key km [(?1 . ?9)] 'bind9)
  (let* ((list-keys (pkb-list-keys km nil t))
	 (categorized-keys
	  (pkb-categorize-key-list list-keys 11 13)))
    (in-pr categorized-keys)
    ;; (in-pr-map 'map-char-table (nth 1 list-keys))
    )
)


(let ((proc-list-keys
       (pkb-categorize-key-list (pkb-list-keys (current-global-map) nil t)
				7 13)))
  (in-pr proc-list-keys))

;; PKB-TRANSL-EVENTS

(let ((bks-w-binds
       '((55 nil (nil bind09) ((meta) bind07))
	 (56 nil (nil bind09))
	 (57 nil (nil bind09) ((meta) bind08))
	 (91 nil (nil bind10)
	     ((control meta) bind01)
	     ((control) .
	      #1=(keymap (57 . bind08) (55 . bind07) (27 . bind01))))
	 (97 nil ((control) bind03) (nil bind02))
	 (102 nil (nil bind05))
	 (103 nil (nil bind06))
	 (113 nil ((control) bind04))
	 ((49 . 54) nil (nil bind09))))
      (binds-char-table (make-char-table 'keymap))
      (translate-events-list '((55 (next 12) t) (57 (C-prior)))))
  ;; (set-char-table-range binds-char-table 27 'defn-of-esc)
  (pkb-transl-events 'bks-w-binds binds-char-table  translate-events-list
		     t nil)
  (in-pr bks-w-binds)
  (insert "\n")
  (in-pr-map 'map-char-table binds-char-table))

;; PKB-TRANSL-SIMP
(let
    ((mks
      '((?\C-d nil bind1)
	(?e nil bind2)
	(55 nil bind3)
	(up nil bind4)
	(27 nil esc-def)
	(91 nil lbra-def)
	(57 nil 57-def)
	(?\M-\e nil other-def)))
     (translate-events-list '((55 (next 12) t) (57 (C-prior)))))
  (in-pr (pkb-transl-simp mks 50 translate-events-list t))
)


;; PKB-SPLIT-FULL-TO-GROUPS

(let* ((list-keys (pkb-list-keys (current-global-map) nil t))
       (categorized-keys
	(pkb-categorize-key-list list-keys 6 13 pkb-translate-events-list))
       (split-for-full
	(pkb-split-full-to-groups (cdr categorized-keys) pkb-key-groups))
       )
  (in-pr split-for-full)
)

;; PKB-BKS-W-BINDS-TO-BLOCKS-PRELIM

(in-pr
 (pkb-bks-w-binds-to-blocks-prelim
   '((55 nil (nil bind09) ((meta) bind07))
     (next nil (nil bind09))
     (57 nil (nil bind09) ((meta) bind08))
     (91 nil (nil bind10)
	 ((control meta) bind01)
	 ((control)
	  #1=(keymap (57 . bind08) (55 . bind07) (27 . bind01))))
     (97 nil ((control) bind03) (nil bind02))
     (102 nil (nil bind05))
     (mouse-1 nil ((control click) bind12) ((down) bind13))
     (mouse-2 nil ((control click) bind06) ((down) bind11))
     (113 nil ((control) bind04))
     (escape nil (nil #1#) ((meta) bind01))
     ((49 . 54) nil (nil bind09)))
  5
  )
)
(((55 nil (nil bind09) ((meta) bind07))
  (next nil (nil bind09))
  (57 nil (nil bind09) ((meta) bind08))
  (91 nil (nil bind10) ((control meta) bind01) ((control) #1=(keymap (57 . bind08) (55 . bind07) (27 . bind01))))
  (97 nil ((control) bind03) (nil bind02)))
 ((102 nil (nil bind05))
  (mouse-1 nil ((control click) bind12) ((down) bind13))
  (mouse-2 nil ((control click) bind06) ((down) bind11))
  (113 nil ((control) bind04))
  (escape nil (nil #1#) ((meta) bind01)))
 (((49 . 54) nil (nil bind09))))

;; `pkb-process-blocks'

(in-pr
 (pkb-process-blocks
  (pkb-bks-w-binds-to-blocks-prelim
   (pkb-html-int-pr-bks
    '((55 nil (nil bind09) ((meta) bind07))
      (next nil (nil bind14))
      (57 nil (nil bind15) ((meta) bind08))
      (91 nil (nil bind10)
	  ((control meta) bind01)
	  ((control)
	   #1=(keymap (57 . bind08) (55 . bind07) (27 . bind01))))
      (97 nil ((control) bind03) (nil bind02))
      (102 nil (nil bind05))
      (mouse-1 nil ((control click) bind12) ((down) bind13))
      (mouse-2 nil ((control click) bind06) ((down) bind11))
      (113 nil ((control) bind04))
      (escape nil (nil #1#) ((meta) bind01))
      ((49 . 54) nil (nil bind09)))
    nil nil nil nil nil)
   5
   ))
)

;; `pkb-add-options'

(defun tst-me ()
  (let ((list-to-test
	 '((nil . "abc")
	   (nil . (outp-str . "cde"))
	   ("qrt" . (outp-str . "tft"))
	   (((outp-str . "ghj")) . "trt")
	   (((outp-str . "ghj")) . (esc-map-fl . t))
	   (((esc-map-fl .  t)) . (outp-str . "ghj"))
	   (((esc-map-fl . t)) . (anchor-name . "tjf"))
	   (((esc-map-fl . t) (other-one . "a")) . (anchor-name . "tjf"))
	   (((esc-map-fl . t) (other-one . "b")) . (other-one . "abde")))))
    (insert "(")
    (pkb-dolist-cons (elem-cons list-to-test)
      (insert
       (concat 
	(unless (eq elem-cons list-to-test)
	  " ")
	"("
	(prin1-to-string (caar elem-cons))
	", "
	(prin1-to-string (cdar elem-cons))
	" -> "))
      (insert
       (concat
	(prin1-to-string
	 (pkb-update-options (caar elem-cons) (cdar elem-cons)))
	")"
	(when (cdr elem-cons)
	  "\n")))))
  (insert ")")
)

(tst-me)

;; PKB-KEY-SEQUENCE-LOCATION

(defun tst-me ()
  (let ((list-to-test
	 '([?\M-\e]
	   [?q ?a ?\M-e]
	   [?q ?a M-next]
	   [?t C-esc])))
    (insert "(")
    (pkb-dolist-cons (elem-cons list-to-test)
      (insert
       (concat 
	(unless (eq elem-cons list-to-test)
	  " ")
	"("
	(prin1-to-string (car elem-cons))
	" -> "
	(prin1-to-string (pkb-key-sequence-location (car elem-cons)))
	")"
	(when (cdr elem-cons)
	  "\n")))))
  (insert ")")
)

(tst-me)
