(while t (insert (concat (prin1-to-string (read-event "Press key:")) "\n")))
escape insert delete home prior next end right down left up return tab

(print-and-ins (event-basic-type 'C-up-mouse-2))up-mouse-2
(print-and-ins (event-modifiers 'C-up-mouse-2))

(print-and-ins (pkb-include-mk-p [C-up-mouse-2]))nil

(print-and-ins (event-basic-type (read-event "Press key")))
return
106
apps
lwindow
backspace
delete
escape

(print-and-ins (event-modifiers (read-event "Press key")))
(control meta)

(setq tmp-lst '(a b c))
(setq tmp-lst2 (append '(d f t) tmp-lst))

(setq tmp-lst (append '(q) tmp-lst))
tmp-lst
(delete 'a tmp-lst)
(defun print-and-ins (object)
  (insert (prin1-to-string object))
  "Print and insert OBJECT"
)

(read-key)

(let (key)
  (read-key)
  (print-and-ins (aref (this-single-command-raw-keys) 0)))
134217735

(let (key)
  (read-key)
  (setq key (aref (this-single-command-raw-keys) 0))
  (insert (concat (prin1-to-string (event-basic-type key)) " "
		  (prin1-to-string (event-modifiers key)))))
103 (control meta)

(event-basic-type 134217735)
(event-modifiers 134217735)

(event-modifiers (aref [201326642] 0))

(pkb-include-mk-p 134217735)

(progn
  (read-key)
  (print-and-ins (pkb-include-mk-p (aref (this-single-command-raw-keys) 0))))


(progn
  (read-key)
  (pkb-include-mk-p (aref (this-single-command-raw-keys) 0)))


[51]
[escape]

(let (tmplst)
  (dolist (a '("1" "2" "3"))
    (dolist (b '("4" "5" "6"))
      (add-to-list 'tmplst (concat a " " b) t)))
  tmplst)

(setq alisttmp '((a 1) (b 2)))
(setq alistb alisttmp)
(add-to-list 'alisttmp '(c 4))
(set (assoc 'a alisttmp) '(a 3))

(lookup-key global-map (read-kbd-macro "C-c"))
(lookup-key global-map (read-kbd-macro "ESC"))
(symbol-function 'mode-specific-command-prefix)
(print-and-ins (symbol-function 'ESC-prefix))


